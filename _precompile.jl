precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Base.fixup_stdlib_path), String})
precompile(Tuple{typeof(Base.get), Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Symbol, Nothing})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Base.isopen), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Vararg{Any, 5}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String}})
precompile(Tuple{Base.var"##printstyled#995", Bool, Bool, Bool, Bool, Bool, Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :italic, :underline, :blink, :reverse, :hidden), NTuple{6, Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{Any}})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getproperty), Base.GenericCondition{Base.ReentrantLock}, Symbol})
precompile(Tuple{Distributed.var"#137#139"})
precompile(Tuple{Revise.var"#105#106"})
precompile(Tuple{typeof(Base.isempty), Base.Set{Tuple{Revise.PkgData, String}}})
precompile(Tuple{typeof(Revise.iswritable), String})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Requires.loaded), Base.PkgId})
precompile(Tuple{typeof(Requires.callbacks), Base.PkgId})
precompile(Tuple{typeof(Libiconv_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(Libffi_jll.find_artifact_dir)})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:throw_error,), Tuple{Bool}}, typeof(Base.Libc.Libdl.dlopen), String})
precompile(Tuple{typeof(XML2_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libiconv_jll.eager_mode)})
precompile(Tuple{typeof(Gettext_jll.find_artifact_dir)})
precompile(Tuple{typeof(XML2_jll.eager_mode)})
precompile(Tuple{typeof(Glib_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libffi_jll.eager_mode)})
precompile(Tuple{typeof(Gettext_jll.eager_mode)})
precompile(Tuple{typeof(LLVMOpenMP_jll.find_artifact_dir)})
precompile(Tuple{typeof(Pixman_jll.find_artifact_dir)})
precompile(Tuple{typeof(LLVMOpenMP_jll.eager_mode)})
precompile(Tuple{typeof(libpng_jll.find_artifact_dir)})
precompile(Tuple{typeof(Bzip2_jll.find_artifact_dir)})
precompile(Tuple{typeof(FreeType2_jll.find_artifact_dir)})
precompile(Tuple{typeof(Bzip2_jll.eager_mode)})
precompile(Tuple{typeof(Expat_jll.find_artifact_dir)})
precompile(Tuple{typeof(Fontconfig_jll.find_artifact_dir)})
precompile(Tuple{typeof(FreeType2_jll.eager_mode)})
precompile(Tuple{typeof(Expat_jll.eager_mode)})
precompile(Tuple{typeof(Base.get!), Base.EnvDict, String, String})
precompile(Tuple{typeof(Base.getindex), Base.EnvDict, String})
precompile(Tuple{typeof(Cairo_jll.find_artifact_dir)})
precompile(Tuple{typeof(Glib_jll.eager_mode)})
precompile(Tuple{typeof(Pixman_jll.eager_mode)})
precompile(Tuple{typeof(libpng_jll.eager_mode)})
precompile(Tuple{typeof(Fontconfig_jll.eager_mode)})
precompile(Tuple{typeof(FriBidi_jll.find_artifact_dir)})
precompile(Tuple{typeof(Graphite2_jll.find_artifact_dir)})
precompile(Tuple{typeof(HarfBuzz_jll.find_artifact_dir)})
precompile(Tuple{typeof(Cairo_jll.eager_mode)})
precompile(Tuple{typeof(Graphite2_jll.eager_mode)})
precompile(Tuple{typeof(Pango_jll.find_artifact_dir)})
precompile(Tuple{typeof(FriBidi_jll.eager_mode)})
precompile(Tuple{typeof(HarfBuzz_jll.eager_mode)})
precompile(Tuple{Type{Base.VersionNumber}, Int32, Int32, Int32})
precompile(Tuple{typeof(libass_jll.find_artifact_dir)})
precompile(Tuple{typeof(libfdk_aac_jll.find_artifact_dir)})
precompile(Tuple{typeof(LAME_jll.find_artifact_dir)})
precompile(Tuple{typeof(Ogg_jll.find_artifact_dir)})
precompile(Tuple{typeof(libvorbis_jll.find_artifact_dir)})
precompile(Tuple{typeof(Ogg_jll.eager_mode)})
precompile(Tuple{typeof(libaom_jll.find_artifact_dir)})
precompile(Tuple{typeof(x264_jll.find_artifact_dir)})
precompile(Tuple{typeof(x265_jll.find_artifact_dir)})
precompile(Tuple{typeof(OpenSSL_jll.find_artifact_dir)})
precompile(Tuple{typeof(Opus_jll.find_artifact_dir)})
precompile(Tuple{typeof(FFMPEG_jll.find_artifact_dir)})
precompile(Tuple{typeof(libass_jll.eager_mode)})
precompile(Tuple{typeof(libfdk_aac_jll.eager_mode)})
precompile(Tuple{typeof(LAME_jll.eager_mode)})
precompile(Tuple{typeof(libvorbis_jll.eager_mode)})
precompile(Tuple{typeof(libaom_jll.eager_mode)})
precompile(Tuple{typeof(x264_jll.eager_mode)})
precompile(Tuple{typeof(x265_jll.eager_mode)})
precompile(Tuple{typeof(OpenSSL_jll.eager_mode)})
precompile(Tuple{typeof(Opus_jll.eager_mode)})
precompile(Tuple{typeof(JpegTurbo_jll.find_artifact_dir)})
precompile(Tuple{typeof(LERC_jll.find_artifact_dir)})
precompile(Tuple{typeof(XZ_jll.find_artifact_dir)})
precompile(Tuple{typeof(Zstd_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libtiff_jll.find_artifact_dir)})
precompile(Tuple{typeof(JpegTurbo_jll.eager_mode)})
precompile(Tuple{typeof(LERC_jll.eager_mode)})
precompile(Tuple{typeof(XZ_jll.eager_mode)})
precompile(Tuple{typeof(Zstd_jll.eager_mode)})
precompile(Tuple{typeof(gdk_pixbuf_jll.find_artifact_dir)})
precompile(Tuple{typeof(Libtiff_jll.eager_mode)})
precompile(Tuple{typeof(Librsvg_jll.find_artifact_dir)})
precompile(Tuple{typeof(gdk_pixbuf_jll.eager_mode)})
precompile(Tuple{typeof(Pango_jll.eager_mode)})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(OpenSpecFun_jll.find_artifact_dir)})
precompile(Tuple{typeof(Base.getproperty), Base.Set{String}, Symbol})
precompile(Tuple{typeof(Revise.watch_package), Base.PkgId})
precompile(Tuple{typeof(Base.active_project), Bool})
precompile(Tuple{typeof(libsixel_jll.find_artifact_dir)})
precompile(Tuple{Sixel.TerminalTools.var"#2#3"{Sixel.TerminalTools.var"#7#9"{String, Base.TTY, REPL.Terminals.TTYTerminal}}})
precompile(Tuple{typeof(Base.in), Char, String})
precompile(Tuple{Type{ImageInTerminal.TerminalGraphicDisplay{TC, TS} where TS<:IO where TC<:IO}, Base.TTY})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.REPLCompletionProvider, REPL.LineEdit.PromptState, Module})
precompile(Tuple{REPL.REPLCompletions.var"#3#8", Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Base.in!), REPL.REPLCompletions.ModuleCompletion, Base.Set{REPL.REPLCompletions.Completion}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(REPL.REPLCompletions.completion_text), Base.Order.ForwardOrdering}, REPL.REPLCompletions.ModuleCompletion, REPL.REPLCompletions.ModuleCompletion})
precompile(Tuple{typeof(REPL.REPLCompletions.completion_text), REPL.REPLCompletions.ModuleCompletion})
precompile(Tuple{Type{NamedTuple{(:dir,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:dicttype,), T} where T<:Tuple}, Tuple{DataType}})
precompile(Tuple{typeof(Base.promoteK), Type})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:dicttype,), Tuple{DataType}}})
precompile(Tuple{typeof(StallNotes.reflect_default)})
precompile(Tuple{Base.var"##open#424", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), YAML.var"#16#17"{Base.Pairs{Symbol, DataType, Tuple{Symbol}, NamedTuple{(:dicttype,), Tuple{DataType}}}, Tuple{}}, String, Vararg{String}})
precompile(Tuple{typeof(Base.string), StringEncodings.Encodings.Encoding{Symbol("UTF-8")}})
precompile(Tuple{YAML.var"##load#9", Type{OrderedCollections.OrderedDict{String, Any}}, typeof(YAML.SafeConstructor), typeof(YAML.load), YAML.TokenStream, Nothing, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Ptr{UInt8}}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{UInt64}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Ptr{UInt8}}}, Ptr{Nothing}})
precompile(Tuple{typeof(YAML.parse_stream_start), YAML.EventStream})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.StreamStartEvent})
precompile(Tuple{typeof(Base.getproperty), Base.KeySet{String, Base.Dict{String, String}}, Symbol})
precompile(Tuple{typeof(YAML.parse_implicit_document_start), YAML.EventStream})
precompile(Tuple{typeof(YAML.firstmark), YAML.BlockMappingStartToken})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.DocumentStartEvent})
precompile(Tuple{typeof(YAML.parse_block_node), YAML.EventStream})
precompile(Tuple{typeof(YAML._parse_node), YAML.BlockMappingStartToken, YAML.EventStream, Bool, Bool})
precompile(Tuple{typeof(YAML.__parse_node), YAML.BlockMappingStartToken, YAML.EventStream, Bool, YAML.Mark, YAML.Mark, Nothing, Nothing, Bool})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.MappingStartEvent})
precompile(Tuple{typeof(YAML.handle_event), YAML.MappingStartEvent, YAML.Composer})
precompile(Tuple{typeof(YAML.parse_block_mapping_first_key), YAML.EventStream})
precompile(Tuple{typeof(Base.push!), Array{YAML.Mark, 1}, YAML.Mark})
precompile(Tuple{typeof(YAML._parse_node), YAML.ScalarToken, YAML.EventStream, Bool, Bool})
precompile(Tuple{typeof(YAML.firstmark), YAML.ScalarToken})
precompile(Tuple{typeof(YAML.__parse_node), YAML.ScalarToken, YAML.EventStream, Bool, YAML.Mark, YAML.Mark, Nothing, Nothing, Bool})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.ScalarEvent})
precompile(Tuple{typeof(YAML.__compose_mapping_node), YAML.ScalarEvent, YAML.Composer, YAML.MappingNode})
precompile(Tuple{typeof(YAML.handle_event), YAML.ScalarEvent, YAML.Composer})
precompile(Tuple{typeof(YAML.resolve), YAML.Resolver, Type{YAML.ScalarNode}, String, Tuple{Bool, Bool}})
precompile(Tuple{typeof(YAML.parse_block_mapping_value), YAML.EventStream})
precompile(Tuple{typeof(YAML._parse_node), YAML.BlockSequenceStartToken, YAML.EventStream, Bool, Bool})
precompile(Tuple{typeof(YAML.firstmark), YAML.BlockSequenceStartToken})
precompile(Tuple{typeof(YAML.__parse_node), YAML.BlockSequenceStartToken, YAML.EventStream, Bool, YAML.Mark, YAML.Mark, Nothing, Nothing, Bool})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.SequenceStartEvent})
precompile(Tuple{typeof(YAML.handle_event), YAML.SequenceStartEvent, YAML.Composer})
precompile(Tuple{typeof(YAML.parse_block_sequence_first_entry), YAML.EventStream})
precompile(Tuple{typeof(YAML.__compose_sequence_node), YAML.MappingStartEvent, YAML.Composer, YAML.SequenceNode})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.MappingEndEvent})
precompile(Tuple{typeof(Base.setproperty!), YAML.MappingNode, Symbol, YAML.Mark})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.SequenceEndEvent})
precompile(Tuple{typeof(Base.setproperty!), YAML.SequenceNode, Symbol, YAML.Mark})
precompile(Tuple{typeof(YAML.parse_document_end), YAML.EventStream})
precompile(Tuple{typeof(YAML.firstmark), YAML.StreamEndToken})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.DocumentEndEvent})
precompile(Tuple{typeof(YAML.lastmark), YAML.StreamEndToken})
precompile(Tuple{typeof(Base.setproperty!), YAML.EventStream, Symbol, YAML.StreamEndEvent})
precompile(Tuple{typeof(YAML.construct_document), YAML.Constructor, YAML.MappingNode})
precompile(Tuple{YAML.var"#3#4"{DataType}, YAML.Constructor, YAML.MappingNode})
precompile(Tuple{typeof(YAML.construct_mapping), Type{OrderedCollections.OrderedDict{String, Any}}, YAML.Constructor, YAML.MappingNode})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{YAML.ScalarNode, YAML.ScalarNode}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{YAML.ScalarNode, YAML.ScalarNode}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), YAML.ScalarNode, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{YAML.ScalarNode, YAML.SequenceNode}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{YAML.ScalarNode, YAML.SequenceNode}, Int64, Int64})
precompile(Tuple{typeof(YAML.construct_object), YAML.Constructor, YAML.ScalarNode})
precompile(Tuple{typeof(YAML.construct_yaml_str), YAML.Constructor, YAML.ScalarNode})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, String, String})
precompile(Tuple{typeof(YAML.construct_object), YAML.Constructor, YAML.SequenceNode})
precompile(Tuple{typeof(YAML.construct_yaml_seq), YAML.Constructor, YAML.SequenceNode})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, YAML.var"#1#2"{YAML.Constructor}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, YAML.var"#1#2"{YAML.Constructor}}})
precompile(Tuple{YAML.var"#1#2"{YAML.Constructor}, YAML.MappingNode})
precompile(Tuple{typeof(YAML.construct_yaml_bool), YAML.Constructor, YAML.ScalarNode})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Bool, String})
precompile(Tuple{typeof(Base._array_for), Type{OrderedCollections.OrderedDict{String, Any}}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{OrderedCollections.OrderedDict{String, Any}, 1}, OrderedCollections.OrderedDict{String, Any}, Base.Generator{Array{Any, 1}, YAML.var"#1#2"{YAML.Constructor}}, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Array{OrderedCollections.OrderedDict{String, Any}, 1}, String})
precompile(Tuple{typeof(Base.get), OrderedCollections.OrderedDict{String, Any}, String, String})
precompile(Tuple{typeof(Base.get), OrderedCollections.OrderedDict{String, Any}, String, Array{Any, 1}})
precompile(Tuple{typeof(Base.filter), StallNotes.var"#1#4", Array{OrderedCollections.OrderedDict{String, Any}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{OrderedCollections.OrderedDict{String, Any}, 1}})
precompile(Tuple{typeof(Base.any), Function, Array{OrderedCollections.OrderedDict{String, Any}, 1}})
precompile(Tuple{typeof(Base._any), StallNotes.var"#2#5", Array{OrderedCollections.OrderedDict{String, Any}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.length), Array{OrderedCollections.OrderedDict{String, Any}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StallNotes.var"#3#6", Array{OrderedCollections.OrderedDict{String, Any}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{OrderedCollections.OrderedDict{String, Any}, 1}, StallNotes.var"#3#6"}})
precompile(Tuple{typeof(Base._array_for), Type{String}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{OrderedCollections.OrderedDict{String, Any}, 1}, StallNotes.var"#3#6"}, Int64})
precompile(Tuple{Type{Base.Set{T} where T}, Array{String, 1}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DateTime})
precompile(Tuple{typeof(Base.iterate), Array{OrderedCollections.OrderedDict{String, Any}, 1}})
precompile(Tuple{typeof(Base.getindex), OrderedCollections.OrderedDict{String, Any}, String})
precompile(Tuple{typeof(StallNotes.replace_braces), String, OrderedCollections.OrderedDict{Any, Any}})
precompile(Tuple{typeof(Base.get), OrderedCollections.OrderedDict{String, Any}, String, Bool})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:default,), Tuple{String}}, typeof(Base.prompt), String})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:default,), Tuple{String}}, typeof(Base.prompt), Base.TTY, Base.TTY, String})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, Base.SubString{String}, String})
precompile(Tuple{typeof(OrderedCollections.hashindex), String, Int64})
precompile(Tuple{typeof(Base.:(!=)), Int32, Int64})
precompile(Tuple{typeof(Base.setproperty!), OrderedCollections.OrderedDict{Any, Any}, Symbol, Int64})
precompile(Tuple{typeof(Base.getindex), OrderedCollections.OrderedDict{Any, Any}, String})
precompile(Tuple{typeof(Base.isempty), Base.SubString{String}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Base.SubString{String}})
precompile(Tuple{typeof(YAML._print), Base.IOStream, Pair{String, Base.SubString{String}}, Int64, Bool})
precompile(Tuple{typeof(Base.iterate), Array{OrderedCollections.OrderedDict{String, Any}, 1}, Int64})
precompile(Tuple{typeof(Base.replace), String, Pair{String, Base.SubString{String}}})
precompile(Tuple{typeof(Base.readline), Base.TTY})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Int32})
precompile(Tuple{REPL.LineEdit.var"#27#28"{REPL.LineEdit.var"#248#256", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#248#256", REPL.LineEdit.MIState, REPL.LineEdit.ModeState, Any})
precompile(Tuple{typeof(Base.something), REPL.LineEdit.Prompt, REPL.LineEdit.Prompt})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:limit,), Tuple{Int64}}})
precompile(Tuple{typeof(Base.isempty), Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:limit,), Tuple{Int64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:limit,), Tuple{Int64}}}})
precompile(Tuple{Type{NamedTuple{(:dicttype,), T} where T<:Tuple}, Tuple{UnionAll}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:dicttype,), Tuple{UnionAll}}})
precompile(Tuple{Type{NamedTuple{(:new, :close, :old), T} where T<:Tuple}, Tuple{Nothing, Bool, Nothing}})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:new, :close, :old), Tuple{Nothing, Bool, Nothing}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:new, :close, :old), Tuple{Nothing, Bool, Nothing}}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:read, :write, :create, :truncate, :append), T} where T<:Tuple}, Tuple{Nothing, Bool, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:read, :write, :create, :truncate, :append), Tuple{Nothing, Bool, Nothing, Nothing, Nothing}}, typeof(Base.open_flags)})
precompile(Tuple{typeof(Base.cconvert), Type, Base.Libc.RawFD})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Base.Libc.RawFD}, Base.Libc.RawFD})
precompile(Tuple{StaticArraysCore.var"##s4#4", Vararg{Any, 5}})
precompile(Tuple{typeof(Base.getproperty), Base.Sort.MissingOptimization{Base.Sort.BoolOptimization{Base.Sort.Small{10, Base.Sort.InsertionSortAlg, Base.Sort.IEEEFloatOptimization{Base.Sort.QuickSortAlg}}}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:unsafe,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.:(<)), Bool, Bool})
precompile(Tuple{typeof(Base.getproperty), Base.Sort.BoolOptimization{Base.Sort.Small{10, Base.Sort.InsertionSortAlg, Base.Sort.IEEEFloatOptimization{Base.Sort.QuickSortAlg}}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Sort.Small{10, Base.Sort.InsertionSortAlg, Base.Sort.IEEEFloatOptimization{Base.Sort.QuickSortAlg}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Sort.IEEEFloatOptimization{Base.Sort.QuickSortAlg}, Symbol})
precompile(Tuple{Base.var"##s128#247", Vararg{Any, 5}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:legacy_dispatch_entry,), Tuple{Nothing}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Nothing}}}})
precompile(Tuple{typeof(Base.:(==)), Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
precompile(Tuple{typeof(Base.isabstracttype), Any})
precompile(Tuple{typeof(Core.Compiler._typename), TypeVar})
precompile(Tuple{Type{NamedTuple{(:flipxy,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Float64}, Float64})
precompile(Tuple{typeof(Base.convert), Type{Ptr{Rsvg.GError}}, Ptr{Nothing}})
precompile(Tuple{Type{Rsvg.GError}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{typeof(Base.nameof), Function})
precompile(Tuple{typeof(Base.get), NamedTuple{(), Tuple{}}, Symbol, Base.Missing})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Int64})
precompile(Tuple{typeof(Base.literal_pow), typeof(Base.:(^)), Int64, Base.Val{52}})
precompile(Tuple{typeof(Base.getproperty), Random.SamplerTrivial{Random.UInt52Raw{Int64}, Int64}, Symbol})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{Tuple{Int64, Int64, Int64}, 1}}}}})
precompile(Tuple{Type{Random.Sampler{E} where E}, Random.TaskLocalRNG, Base.UnitRange{Int64}, Base.Val{1}})
precompile(Tuple{typeof(Base.getproperty), Random.SamplerRangeNDL{UInt64, Int64}, Symbol})
precompile(Tuple{typeof(Base.:(-)), UInt64})
precompile(Tuple{typeof(Base.mod), UInt64, UInt64})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:callback,), Tuple{WordCloud.var"#30#34"}}, Tuple{Symbol}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:roomfinder,), Tuple{typeof(Stuffing.QTrees.findroom_uniform)}}, Tuple{Symbol}})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:roomfinder, :callback), Tuple{typeof(Stuffing.QTrees.findroom_uniform), WordCloud.var"#30#34"}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.cconvert), Type, Int8})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Int8}, Int8})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}}}}})
precompile(Tuple{Random.var"##s994#3", Vararg{Any, 4}})
precompile(Tuple{Random.var"##s994#4", Vararg{Any, 4}})
precompile(Tuple{Type{Random.Sampler{E} where E}, Random.TaskLocalRNG, NTuple{4, Tuple{Float64, Float64}}, Base.Val{1}})
precompile(Tuple{typeof(Base.getproperty), Random.SamplerSimple{NTuple{4, Tuple{Float64, Float64}}, Random.SamplerType{UInt32}, Tuple{Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.getindex), Random.SamplerSimple{NTuple{4, Tuple{Float64, Float64}}, Random.SamplerType{UInt32}, Tuple{Float64, Float64}}})
precompile(Tuple{typeof(Base._any_tuple), Base.var"#48#49", Bool, Type})
precompile(Tuple{Type{NamedTuple{(:by, :rev), T} where T<:Tuple}, Tuple{typeof(Base.maximum), Bool}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{Tuple{Int64, Int64}, 1}}}}})
precompile(Tuple{typeof(Base.getproperty), Base.Order.By{typeof(Base.maximum), Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Base.Order.Lt{Base.Sort.var"#26#27"{Base.Order.By{typeof(Base.maximum), Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}}}}, Symbol})
precompile(Tuple{typeof(Base.sqrt), Float64})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, ColorTypes.RGBA{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.convert), Type{XML.RawType}, XML.RawType})
precompile(Tuple{Type{UInt8}, UInt8})
precompile(Tuple{Base.Colon, UInt8, UInt8})
precompile(Tuple{typeof(Base.first), Base.UnitRange{UInt8}})
precompile(Tuple{typeof(Base.last), Base.UnitRange{UInt8}})
precompile(Tuple{typeof(Base.oftype), Int64, Nothing})
precompile(Tuple{typeof(Base.isnothing), Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, XML.var"#12#13"}, Symbol})
precompile(Tuple{typeof(Base._iterator_upper_bound), Base.Generator{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, XML.var"#12#13"}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataType, DataType}, Int64, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, XML.var"#9#10"}, Symbol})
precompile(Tuple{typeof(Base._iterator_upper_bound), Base.Generator{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, XML.var"#9#10"}})
precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.isnothing), Tuple{}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{XML.Node, 1}}})
precompile(Tuple{Type{NamedTuple{(:indentsize,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Tuple{}, typeof(Base.identity)}, Symbol})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Tuple{}, typeof(Base.identity)}, Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:checkfile,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(StallNotes.summarize_posts)})
precompile(Tuple{typeof(OrderedCollections.hashindex), Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base.setproperty!), OrderedCollections.OrderedDict{AbstractString, Integer}, Symbol, Int64})
precompile(Tuple{Base.var"##open#424", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), YAML.var"#16#17"{Base.Pairs{Symbol, UnionAll, Tuple{Symbol}, NamedTuple{(:dicttype,), Tuple{UnionAll}}}, Tuple{}}, String, Vararg{String}})
precompile(Tuple{YAML.var"##load#9", Type{OrderedCollections.OrderedDict{K, V} where V where K}, typeof(YAML.SafeConstructor), typeof(YAML.load), YAML.TokenStream, Nothing, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.string)})
precompile(Tuple{YAML.var"#3#4"{UnionAll}, YAML.Constructor, YAML.MappingNode})
precompile(Tuple{typeof(YAML.construct_mapping), Type{OrderedCollections.OrderedDict{K, V} where V where K}, YAML.Constructor, YAML.MappingNode})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{Any, Any}, String, String})
precompile(Tuple{typeof(Base.values), OrderedCollections.OrderedDict{Any, Any}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.identity), Base.ValueIterator{OrderedCollections.OrderedDict{Any, Any}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.ValueIterator{OrderedCollections.OrderedDict{Any, Any}}, typeof(Base.identity)}})
precompile(Tuple{typeof(Base._array_for), Type{String}, Base.HasLength, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.ValueIterator{OrderedCollections.OrderedDict{Any, Any}}, typeof(Base.identity)}, Int64})
precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
precompile(Tuple{Type{NamedTuple{(:taskref, :spawn, :threadpool), T} where T<:Tuple}, Tuple{Nothing, Bool, Nothing}})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Float32}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:init,), Tuple{Float32}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Float32, Tuple{Symbol}, NamedTuple{(:init,), Tuple{Float32}}}})
precompile(Tuple{typeof(Base.log), Float64})
precompile(Tuple{typeof(Base.eachindex), Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{Base.var"#316#317"{typeof(Base.identity)}, Base.BottomRF{typeof(Base._rf_findmax)}}, Type{Pair{Int64, Float32}}})
precompile(Tuple{typeof(WordCloud.wordcloud), String})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Base.displaysize), Base.DevNull})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Vararg{Any, 5}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.DevNull})
precompile(Tuple{typeof(Base.write), Base.DevNull, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.first), Nothing})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:base,), Tuple{Int64}}})
precompile(Tuple{typeof(Base.isempty), Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:base,), Tuple{Int64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:base,), Tuple{Int64}}}})
precompile(Tuple{Base.var"#651#652"{LanguageIdentification.var"#producer#7"{Base.EachLine{Base.IOStream}}, Base.Channel{Any}}})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Array{UInt8, 1}, Float32}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{Array{UInt8, 1}, Float32}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.in), Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(+)), Float64, Float32})
precompile(Tuple{Type{Pair{A, B} where B where A}, Array{UInt8, 1}, Float32})
precompile(Tuple{typeof(Base.push!), Array{Pair{Array{UInt8, 1}, Float32}, 1}, Pair{Array{UInt8, 1}, Float32}})
precompile(Tuple{typeof(Base.:(>=)), Float64, Float64})
precompile(Tuple{Base.var"#460#461"{Base.IOStream}})
precompile(Tuple{Base.var"#655#656"{Base.Channel{Any}, Task}})
precompile(Tuple{typeof(Base.println), Base.DevNull, String})
precompile(Tuple{typeof(Base.in), String, Base.Set{String}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:language,), Tuple{String}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:language,), Tuple{String}}, typeof(WordCloud.TextProcessing.countwords), String})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, Function}, String})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Function}, String, Function})
precompile(Tuple{typeof(WordCloud.TextProcessing.tokenizer_eng), String})
precompile(Tuple{typeof(Base.Iterators.repeated), Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:language,), Tuple{String}}, typeof(WordCloud.TextProcessing.countwords), Base.Generator{Base.RegexMatchIterator, WordCloud.TextProcessing.var"#3#4"}})
precompile(Tuple{typeof(WordCloud.TextProcessing.lemmatize!), Base.Dict{String, Int64}, typeof(WordCloud.TextProcessing.lemmatizer_eng)})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:maxnum, :stopwords, :stopwords_extra), Tuple{Int64, Symbol, Nothing}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:language,), Tuple{String}}, NamedTuple{(:maxnum, :stopwords, :stopwords_extra), Tuple{Int64, Symbol, Nothing}}})
precompile(Tuple{typeof(WordCloud.TextProcessing.rescaleweights), Function, Int64})
precompile(Tuple{typeof(Base.log), Int64})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:lo,), Tuple{Int64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:lo,), Tuple{Int64}}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:lo,), Tuple{Int64}}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.get), NamedTuple{(:lo,), Tuple{Int64}}, Symbol, Base.Missing})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:rev,), Tuple{Bool}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:rev,), Tuple{Bool}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:language, :maxnum, :stopwords, :stopwords_extra), Tuple{String, Int64, Symbol, Nothing}}, typeof(WordCloud.TextProcessing.processtext), Base.Dict{String, Int64}})
precompile(Tuple{typeof(Base.haskey), StopWords.StopWordsDict, String})
precompile(Tuple{typeof(Base.get), StopWords.StopWordsDict, String, Nothing})
precompile(Tuple{typeof(Base.print), Base.DevNull, String})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Sort._sort!), Array{Int64, 1}, Base.Sort.MissingOptimization{Base.Sort.BoolOptimization{Base.Sort.Small{10, Base.Sort.InsertionSortAlg, Base.Sort.IEEEFloatOptimization{Base.Sort.ScratchQuickSort{Int64, Int64, Base.Sort.InsertionSortAlg}}}}}, Base.Order.Perm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}}, NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.Broadcast.DefaultArrayStyle{1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.log1p), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Array{Float64, 1}, Float64}}}}, Int64}}, Float64}}})
precompile(Tuple{typeof(Base.sym_in), Symbol, NTuple{17, Symbol}})
precompile(Tuple{Type{NamedTuple{(:step,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{Type{Random.Sampler{E} where E}, Random.TaskLocalRNG, Tuple{Int64, Int64, Int64}, Base.Val{1}})
precompile(Tuple{typeof(Base.getproperty), Random.SamplerSimple{Tuple{Int64, Int64, Int64}, Random.SamplerTrivial{Random.UInt52{UInt64}, UInt64}, Int64}, Symbol})
precompile(Tuple{typeof(Base.getindex), Random.SamplerSimple{Tuple{Int64, Int64, Int64}, Random.SamplerTrivial{Random.UInt52{UInt64}, UInt64}, Int64}})
precompile(Tuple{Type{Random.Sampler{E} where E}, Type{Random.TaskLocalRNG}, Base.OneTo{Int64}, Base.Val{1}})
precompile(Tuple{Type{Signed}, UInt64})
precompile(Tuple{typeof(Base.convert), Type{Float64}, Float64})
precompile(Tuple{typeof(Base.abs), Float64})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float32})
precompile(Tuple{typeof(Base.trunc), Type{Int64}, Float64})
precompile(Tuple{typeof(Base.:(-)), Float64, Int64})
precompile(Tuple{typeof(Base.abs), Int64})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(Base.:(<)), Float64, Int64})
precompile(Tuple{typeof(Base.round), Type{Int64}, Float64})
precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Base.:(+)), Bool, Bool})
precompile(Tuple{Type{Random.Sampler{E} where E}, Random.TaskLocalRNG, Tuple{NTuple{4, Int64}, Symbol}, Base.Val{1}})
precompile(Tuple{typeof(Base.getindex), Random.SamplerSimple{Tuple{NTuple{4, Int64}, Symbol}, Random.SamplerType{Bool}, Any}})
precompile(Tuple{typeof(Base.getproperty), Random.SamplerSimple{Tuple{NTuple{4, Int64}, Symbol}, Random.SamplerType{Bool}, Any}, Symbol})
precompile(Tuple{Type{Pair{A, B} where B where A}, Function, Float64})
precompile(Tuple{Type{Pair{A, B} where B where A}, Function, Int64})
precompile(Tuple{Base.var"#54#55", Type, Type})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{typeof(WordCloud.Render.squircle), Float64}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Pair{typeof(WordCloud.Render.squircle), Float64}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{typeof(WordCloud.Render.squircle), Float64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{typeof(WordCloud.Render.squircle), Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.:(/)), Int64, Base.Irrational{:ℯ}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{typeof(WordCloud.Render.squircle), 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast._getindex), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Int64}}}, Int64})
precompile(Tuple{Type{NamedTuple{(:action,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.Broadcast.broadcastable), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.:(*)), Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:action,), Tuple{Symbol}}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.:(-)), Base.Irrational{:π}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{typeof(WordCloud.Render.box), 1}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:cornerradius,), Tuple{Int64}}}})
precompile(Tuple{typeof(Base.cconvert), Type, Float64})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:action,), Tuple{Symbol}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:action,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{typeof(Luxor.ellipse), 1}}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, WordCloud.var"#132#133"}, Symbol})
precompile(Tuple{Type{Random.Sampler{E} where E}, Random.TaskLocalRNG, Tuple{Int64, Float64, Float64}, Base.Val{1}})
precompile(Tuple{typeof(Base.getproperty), Random.SamplerSimple{Tuple{Int64, Float64, Float64}, Random.SamplerTrivial{Random.UInt52{UInt64}, UInt64}, Real}, Symbol})
precompile(Tuple{typeof(Base.getindex), Random.SamplerSimple{Tuple{Int64, Float64, Float64}, Random.SamplerTrivial{Random.UInt52{UInt64}, UInt64}, Real}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{typeof(WordCloud.Render.ngon), 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{typeof(WordCloud.Render.star), 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{typeof(WordCloud.Render.bezingon), 1}}})
precompile(Tuple{Type{NamedTuple{(:vertices,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:close,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{typeof(WordCloud.Render.bezistar), 1}}})
precompile(Tuple{Type{Random.Sampler{E} where E}, Random.TaskLocalRNG, Tuple{NTuple{4, Int64}, Symbol, Symbol}, Base.Val{1}})
precompile(Tuple{typeof(Base.getproperty), Random.SamplerSimple{Tuple{NTuple{4, Int64}, Symbol, Symbol}, Random.SamplerTrivial{Random.UInt52{UInt64}, UInt64}, Any}, Symbol})
precompile(Tuple{typeof(Base.getindex), Random.SamplerSimple{Tuple{NTuple{4, Int64}, Symbol, Symbol}, Random.SamplerTrivial{Random.UInt52{UInt64}, UInt64}, Any}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{UnionAll, DataType, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{UnionAll, DataType, DataType}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcast_shape), Tuple{}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{Type{NamedTuple{(:default,), T} where T<:Tuple}, Tuple{UInt8}})
precompile(Tuple{typeof(Base.:(==)), Function, Function})
precompile(Tuple{typeof(Cairo.write_to_stream_callback), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{UInt8}, UInt32})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:language,), Tuple{String}}, typeof(WordCloud.wordcloud), Tuple{Array{String, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.length), ColorSchemes.ColorScheme{Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, String, String}})
precompile(Tuple{typeof(Random.randsubseq), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Float64})
precompile(Tuple{typeof(Base.isempty), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Base.length), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.print), Base.DevNull, String, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.DevNull, Int64})
precompile(Tuple{typeof(Base.println), String, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.println), Base.DevNull, String, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.DevNull, String, Base.UnitRange{Int64}, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.DevNull, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.print), Base.DevNull, Char})
precompile(Tuple{typeof(WordCloud.randomfonts), String})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, Array{String, 1}}, String})
precompile(Tuple{typeof(WordCloud.fontsof), String})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Array{String, 1}}, String, Array{Any, 1}})
precompile(Tuple{typeof(Base.Iterators.flatten), Tuple{Array{Any, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.Iterators.flatten), Tuple{Array{String, 1}, Array{String, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Tuple{Array{String, 1}, Array{String, 1}}}, Tuple{Int64, Array{String, 1}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Flatten{Tuple{Array{Any, 1}, Array{String, 1}}}, Tuple{Int64, Array{String, 1}, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, WordCloud.var"#113#114"}})
precompile(Tuple{WordCloud.var"#113#114", String})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, WordCloud.var"#113#114"}, Int64})
precompile(Tuple{typeof(Base.union), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(WordCloud.iter_expand), NTuple{5, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.Iterators.take), WordCloud.IterGen, Int64})
precompile(Tuple{typeof(Base.:(|>)), Base.Iterators.Take{WordCloud.IterGen}, typeof(Base.collect)})
precompile(Tuple{WordCloud.var"#57#58"{NTuple{5, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}}, Int64})
precompile(Tuple{typeof(WordCloud.iter_expand), Base.UnitRange{Int64}})
precompile(Tuple{WordCloud.var"#55#56"{Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(WordCloud.iter_expand), String})
precompile(Tuple{typeof(Base.Iterators.take), Base.Iterators.Repeated{String}, Int64})
precompile(Tuple{typeof(Base.:(|>)), Base.Iterators.Take{Base.Iterators.Repeated{String}}, typeof(Base.collect)})
precompile(Tuple{Fontconfig.var"#2#5", Fontconfig.Pattern})
precompile(Tuple{typeof(WordCloud.randommaskcolor), Array{Any, 1}})
precompile(Tuple{typeof(Base.in!), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Base.Set{Any}})
precompile(Tuple{typeof(WordCloud.Render.parsecolor), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(WordCloud.Render.parsecolor), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.setindex!), Array{ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(WordCloud.Render.parsecolor), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, Type{ColorTypes.Gray{T} where T<:Union{Bool, AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Tuple{Array{ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{ColorTypes.Gray{T} where T<:Union{Bool, AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Tuple{Array{ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, Type{ColorTypes.Gray{T} where T<:Union{Bool, AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Tuple{Array{ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 1}}}}})
precompile(Tuple{typeof(Base.:(|>)), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 1}, typeof(Base.sort)})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Int64})
precompile(Tuple{typeof(Base.lastindex), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.length), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.diff), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.identity), typeof(Base.max)}, Type{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{typeof(Base.maximum), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.isequal), ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.findlast), Function, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.findprev), Base.Fix2{typeof(Base.isequal), ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 1}, Int64})
precompile(Tuple{typeof(Base.:(-)), Int64, ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.:(>)), ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, ColorTypes.Gray{Float32}})
precompile(Tuple{typeof(Base.sum), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(Base.:(<)), ColorTypes.Gray{Float64}, Float64})
precompile(Tuple{typeof(Base.:(<)), ColorTypes.Gray{Float32}, Float64})
precompile(Tuple{typeof(Base.:(+)), ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, Float64})
precompile(Tuple{typeof(Base.max), ColorTypes.Gray{Float64}, Float64})
precompile(Tuple{typeof(Base.Math.clamp), Float64, Int64, Int64})
precompile(Tuple{typeof(Base.rand), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:digits,), Tuple{Int64}}, typeof(Base.round), Float64})
precompile(Tuple{typeof(Base.rand), Tuple{Float64, Tuple{Float64, Float64, Float64}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:maskshape, :color, :padding, :preservevolume, :returnkwargs), Tuple{Symbol, Float64, Int64, Bool, Bool}}, Array{Any, 1}})
precompile(Tuple{typeof(ColorTypes._rem), Float64, Type{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:action,), Tuple{Symbol}}, Type{NamedTuple{(:npoints, :orientation), T} where T<:Tuple}})
precompile(Tuple{Type{NamedTuple{(:action, :vertices, :reversepath), T} where T<:Tuple}, Tuple{Symbol, Bool, Bool}})
precompile(Tuple{Type{NamedTuple{(:action, :close, :reversepath), T} where T<:Tuple}, Tuple{Symbol, Bool, Bool}})
precompile(Tuple{typeof(Base.structdiff), NamedTuple{(:action,), Tuple{Symbol}}, Type{NamedTuple{(:npoints, :starratio, :orientation), T} where T<:Tuple}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:maskshape, :color, :padding, :preservevolume, :returnkwargs), Tuple{Symbol, Float64, Int64, Bool, Bool}}, typeof(WordCloud.randommask), Float64})
precompile(Tuple{typeof(Base.empty), Base.Dict{typeof(WordCloud.Render.squircle), Float64}, Type{Function}, Type{Float64}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Function, Float64}, Base.Dict{typeof(WordCloud.Render.squircle), Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, Float64}, Float64, typeof(WordCloud.Render.box)})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Function, Float64}, Tuple{Pair{typeof(WordCloud.Render.squircle), Float64}, Pair{typeof(WordCloud.Render.box), Float64}, Pair{typeof(Luxor.ellipse), Float64}, Pair{typeof(WordCloud.Render.ngon), Float64}, Pair{typeof(WordCloud.Render.star), Float64}, Pair{typeof(WordCloud.Render.bezingon), Float64}, Pair{typeof(WordCloud.Render.bezistar), Int64}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, Float64}, Float64, typeof(Luxor.ellipse)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, Float64}, Float64, typeof(WordCloud.Render.ngon)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, Float64}, Float64, typeof(WordCloud.Render.star)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, Float64}, Float64, typeof(WordCloud.Render.bezingon)})
precompile(Tuple{typeof(Base.empty), Base.Dict{Function, Float64}, Type{Function}, Type{Real}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Function, Real}, Base.Dict{Function, Float64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, Real}, Float64, typeof(Luxor.ellipse)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, Real}, Float64, typeof(WordCloud.Render.star)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, Real}, Float64, typeof(WordCloud.Render.bezingon)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, Real}, Float64, typeof(WordCloud.Render.squircle)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, Real}, Float64, typeof(WordCloud.Render.ngon)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, Real}, Float64, typeof(WordCloud.Render.box)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, Real}, Int64, typeof(WordCloud.Render.bezistar)})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Function, Real}, Tuple{Pair{typeof(WordCloud.Render.squircle), Float64}, Pair{typeof(WordCloud.Render.box), Float64}, Pair{typeof(Luxor.ellipse), Float64}, Pair{typeof(WordCloud.Render.ngon), Float64}, Pair{typeof(WordCloud.Render.star), Float64}, Pair{typeof(WordCloud.Render.bezingon), Float64}, Pair{typeof(WordCloud.Render.bezistar), Int64}}, Int64})
precompile(Tuple{typeof(Base.keys), Base.Dict{Function, Real}})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Base.KeySet{Function, Base.Dict{Function, Real}}})
precompile(Tuple{typeof(Base.get), Base.Dict{Function, Real}, Symbol, Float64})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:npoints, :starratio), Tuple{Int64, Float64}}, typeof(WordCloud.Render.star_area), Float64, Float64})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:npoints, :starratio, :orientation), Tuple{Int64, Float64, Float64}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:npoints, :starratio, :orientation, :color, :padding), Tuple{Int64, Float64, Float64, Float64, Int64}}, typeof(WordCloud.callshape), Function, Vararg{Any}})
precompile(Tuple{WordCloud.var"##callshape#131", Base.Pairs{Symbol, Real, NTuple{5, Symbol}, NamedTuple{(:npoints, :starratio, :orientation, :color, :padding), Tuple{Int64, Float64, Float64, Float64, Int64}}}, typeof(WordCloud.callshape), Function, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Function})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.repr), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.repr), Tuple{Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.repr), Tuple{Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Pairs{Symbol, Real, NTuple{5, Symbol}, NamedTuple{(:npoints, :starratio, :orientation, :color, :padding), Tuple{Int64, Float64, Float64, Float64, Int64}}}, WordCloud.var"#132#133"}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.Pairs{Symbol, Real, NTuple{5, Symbol}, NamedTuple{(:npoints, :starratio, :orientation, :color, :padding), Tuple{Int64, Float64, Float64, Float64, Int64}}}, WordCloud.var"#132#133"}, Int64})
precompile(Tuple{typeof(Base.repr), Float64})
precompile(Tuple{typeof(Base.repr), Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:npoints, :starratio, :orientation, :color, :padding), Tuple{Int64, Float64, Float64, Float64, Int64}}, typeof(WordCloud.Render.shape), Function, Int64, Int64})
precompile(Tuple{WordCloud.Render.var"##shape#29", Int64, String, Int64, Float64, NTuple{4, Int64}, Tuple{Int64, Int64}, Base.Pairs{Symbol, Real, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:npoints, :starratio, :orientation), Tuple{Int64, Float64, Float64}}}, typeof(WordCloud.Render.shape), typeof(WordCloud.Render.bezistar), Int64, Int64})
precompile(Tuple{typeof(Base.:(==)), Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(Cairo.destroy), Cairo.CairoSurfaceIOStream{UInt32}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{WordCloud.Render.SVG, Base.Pairs{Symbol, Real, NTuple{5, Symbol}, NamedTuple{(:npoints, :starratio, :orientation, :color, :padding), Tuple{Int64, Float64, Float64, Float64, Int64}}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{WordCloud.Render.SVG, Base.Pairs{Symbol, Real, NTuple{5, Symbol}, NamedTuple{(:npoints, :starratio, :orientation, :color, :padding), Tuple{Int64, Float64, Float64, Float64, Int64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Pairs{Symbol, Real, NTuple{5, Symbol}, NamedTuple{(:npoints, :starratio, :orientation, :color, :padding), Tuple{Int64, Float64, Float64, Float64, Int64}}}})
precompile(Tuple{typeof(Cairo.destroy), Cairo.CairoSurfaceBase{UInt32}})
precompile(Tuple{typeof(WordCloud.Render.recolor!), Base.ReinterpretArray{ColorTypes.ARGB32, 2, UInt32, Array{UInt32, 2}, false}, Float64})
precompile(Tuple{typeof(WordCloud.preparemask), Base.ReinterpretArray{ColorTypes.ARGB32, 2, UInt32, Array{UInt32, 2}, false}, Function})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{2}, WordCloud.var"#10#12", Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(WordCloud.Render.torgba), Tuple{Base.ReinterpretArray{ColorTypes.ARGB32, 2, UInt32, Array{UInt32, 2}, false}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{2}, typeof(Base.:(!)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, WordCloud.var"#10#12", Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(WordCloud.Render.torgba), Tuple{Base.ReinterpretArray{ColorTypes.ARGB32, 2, UInt32, Array{UInt32, 2}, false}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(Base.:(!)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, WordCloud.var"#10#12", Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(WordCloud.Render.torgba), Tuple{Base.ReinterpretArray{ColorTypes.ARGB32, 2, UInt32, Array{UInt32, 2}, false}}}}}}}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(Base.reinterpret), Type, FixedPointNumbers.Normed{UInt8, 8}})
precompile(Tuple{typeof(WordCloud.Render.torgba), Float64})
precompile(Tuple{typeof(Base.:(!=)), NTuple{4, UInt8}, NTuple{4, UInt8}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(!)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, WordCloud.var"#10#12", Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(WordCloud.Render.torgba), Tuple{Base.Broadcast.Extruded{Base.ReinterpretArray{ColorTypes.ARGB32, 2, UInt32, Array{UInt32, 2}, false}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}}}}}, Type{Bool}})
precompile(Tuple{typeof(Base.setindex!), Base.BitArray{2}, Bool, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Base.BitArray{2}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(!)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, WordCloud.var"#10#12", Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, typeof(WordCloud.Render.torgba), Tuple{Base.Broadcast.Extruded{Base.ReinterpretArray{ColorTypes.ARGB32, 2, UInt32, Array{UInt32, 2}, false}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}}}}}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndex{2}, Int64})
precompile(Tuple{typeof(Rsvg.destroy), Rsvg.RsvgHandle})
precompile(Tuple{typeof(Rsvg.destroy), Rsvg.GInputStream})
precompile(Tuple{typeof(Stuffing.maskqtree), Base.BitArray{2}})
precompile(Tuple{typeof(Base.getindex), Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}, Int64})
precompile(Tuple{typeof(WordCloud.occupancy), Base.BitArray{2}, Bool})
precompile(Tuple{typeof(WordCloud.occupancy), Array{UInt8, 2}, UInt8})
precompile(Tuple{typeof(Base.size), Base.ReinterpretArray{ColorTypes.ARGB32, 2, UInt32, Array{UInt32, 2}, false}})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.min), Int64, Float64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.literal_pow), Function, Array{Float64, 1}, Base.Val{2}})
precompile(Tuple{Type{Base.RefValue{T} where T}, typeof(Base.:(^))})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Array{Float64, 1}, Base.RefValue{Base.Val{2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.length), Array{String, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Array{Float64, 1}, Base.RefValue{Base.Val{2}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Array{Float64, 1}, Base.RefValue{Base.Val{2}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{String, 1}}}}}})
precompile(Tuple{typeof(Base.sum), Array{Float64, 1}})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Array{Float64, 1}, Float64}}})
precompile(Tuple{typeof(Base.view), Array{String, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), Array{Any, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), Array{WordCloud.Render.SVG, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:density, :maxiter, :tolerance), Tuple{Float64, Int64, Float64}}, typeof(WordCloud.findscale!), WordCloud.WC})
precompile(Tuple{typeof(Base.length), Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.literal_pow), Function, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.Val{2}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.RefValue{Base.Val{2}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.length), Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.RefValue{Base.Val{2}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.RefValue{Base.Val{2}}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}}}}}})
precompile(Tuple{typeof(Base.length), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.isapprox), Float64, Float64})
precompile(Tuple{typeof(WordCloud.getfonts), WordCloud.WC, Function})
precompile(Tuple{typeof(Base.eachindex), Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Base.OneTo{Int64}})
precompile(Tuple{typeof(WordCloud.getangles), WordCloud.WC, Function})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(/)), Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Array{Any, 1}, Int64}}, Base.Irrational{:π}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Array{Any, 1}, Int64}}, Base.Irrational{:π}}}})
precompile(Tuple{typeof(Base.:(*)), Float64, Base.Irrational{:π}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Irrational{:π}}}, Type{Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Irrational{:π}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.prod), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Tuple{Int64, Int64}, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(*)), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Tuple{Int64, Int64}, Float64}}, Float64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(*)), Tuple{Tuple{Int64, Int64}, Float64}}, Float64}}})
precompile(Tuple{typeof(Base.minimum), Tuple{Float64, Float64}})
precompile(Tuple{typeof(WordCloud.getfontsizes), WordCloud.WC, Function})
precompile(Tuple{typeof(WordCloud.wordids), WordCloud.WC, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(WordCloud.wordids), Tuple{Base.RefValue{WordCloud.WC}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Int64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(WordCloud.wordids), Tuple{Base.RefValue{WordCloud.WC}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcast), WordCloud.var"#16#17"{WordCloud.WC}, Base.OneTo{Int64}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{Any, Any}}, Symbol})
precompile(Tuple{typeof(Base.keys), Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.in), Int64, Base.KeySet{Any, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.Math.clamp), Float64, Float64, Float64})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, WordCloud.var"#16#17"{WordCloud.WC}, Tuple{Base.Broadcast.Extruded{Base.OneTo{Int64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Float64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, WordCloud.var"#16#17"{WordCloud.WC}, Tuple{Base.Broadcast.Extruded{Base.OneTo{Int64}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Array{Float64, 1}, Vararg{Any}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Array{Float64, 1}, Array{String, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, NTuple{4, Base.Missing}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Bool, NTuple{4, Base.Missing}}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Array{Float64, 1}, Array{String, 1}, Array{Float64, 1}}, NTuple{4, Tuple{}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:backgroundcolor, :font, :border), Tuple{NTuple{4, Int64}, String, Int64}}, typeof(WordCloud.Render.rendertext), String, Float64})
precompile(Tuple{typeof(Luxor.setcolor), ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.max), Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(>)), Tuple{Float64, Float64}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(>)), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.:(>)), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}})
precompile(Tuple{typeof(Base.any), Tuple{Bool, Bool}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Array{Float64, 1}, Array{String, 1}, Array{Float64, 1}}}, Tuple{Tuple{Base.OneTo{Int64}, Int64}, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.ARGB32, 2}, Int64})
precompile(Tuple{typeof(WordCloud.feelingoccupancy), Array{Any, 1}, Int64, ColorTypes.ARGB32})
precompile(Tuple{typeof(Base.size), Array{ColorTypes.ARGB32, 2}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.minimum), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.size), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Type{Int64}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{Int64, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.minimum), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.size), Tuple{Base.Broadcast.Extruded{Array{Any, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.eachindex), Base.IndexLinear, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Statistics.mean), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(>)), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(>)), Tuple{Array{Int64, 1}, Int64}}})
precompile(Tuple{typeof(Base.view), Array{Any, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(WordCloud.dilatedoccupancy), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, Int64, ColorTypes.ARGB32, Int64})
precompile(Tuple{typeof(Base.getproperty), Base.FlatteningRF{Base.BottomRF{typeof(Base.add_sum)}}, Symbol})
precompile(Tuple{WordCloud.var"#105#106"{Int64, ColorTypes.ARGB32, Int64}, Array{ColorTypes.ARGB32, 2}})
precompile(Tuple{Type{Base.IteratorsMD.CartesianIndices{N, R} where R<:Tuple{Vararg{Base.OrdinalRange{Int64, Int64}, N}} where N}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.iterate), Base.IteratorsMD.CartesianIndices{0, Tuple{}}, Bool})
precompile(Tuple{typeof(Base._accumulaten!), typeof(Base.add_sum), Array{Int64, 2}, Array{Int64, 2}, Base.IteratorsMD.CartesianIndices{1, Tuple{Base.OneTo{Int64}}}, Base.OneTo{Int64}, Base.IteratorsMD.CartesianIndices{0, Tuple{}}, Nothing})
precompile(Tuple{typeof(Base.reduce_first), typeof(Base.add_sum), Int64})
precompile(Tuple{Base.MappingRF{WordCloud.var"#105#106"{Int64, ColorTypes.ARGB32, Int64}, Base.BottomRF{typeof(Base.add_sum)}}, Int64, Array{ColorTypes.ARGB32, 2}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(Base.:(!)), Base.BitArray{1}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Base.BitArray{1}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.:(!)), Tuple{Base.BitArray{1}}}})
precompile(Tuple{typeof(WordCloud.boxoccupancy), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{WordCloud.var"#99#100"{Int64}, Array{ColorTypes.ARGB32, 2}})
precompile(Tuple{Base.MappingRF{WordCloud.var"#99#100"{Int64}, Base.BottomRF{typeof(Base.add_sum)}}, Int64, Array{ColorTypes.ARGB32, 2}})
precompile(Tuple{typeof(WordCloud.scaleiterstep), Vararg{Float64, 5}})
precompile(Tuple{typeof(Base.findlast), Function, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.findprev), WordCloud.var"#25#26"{WordCloud.WC}, Base.StepRange{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcast), Function, Int64, Int64})
precompile(Tuple{WordCloud.var"##initialize!#23", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(WordCloud.initialize!), WordCloud.WC, Function})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(WordCloud.initialize!), WordCloud.WC, Base.OneTo{Int64}})
precompile(Tuple{Type{Base.Slice{T} where T<:(Base.AbstractUnitRange{T} where T)}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(WordCloud.initialize!), Tuple{Base.RefValue{WordCloud.WC}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.SubArray{String, 1, Array{String, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{WordCloud.var"##initialize!#22", NTuple{4, Int64}, Int64, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64, String, typeof(WordCloud.initialize!), WordCloud.WC, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:font, :backgroundcolor, :border), Tuple{String, NTuple{4, Int64}, Int64}}, typeof(WordCloud.prepareword), String, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, Array{ColorTypes.ARGB32, 2}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.SubArray{WordCloud.Render.SVG, 1, Array{WordCloud.Render.SVG, 1}, Tuple{Array{Int64, 1}}, false}, WordCloud.Render.SVG, Int64})
precompile(Tuple{typeof(WordCloud.ternary_wordmask), Array{ColorTypes.ARGB32, 2}, NTuple{4, Int64}, Int64})
precompile(Tuple{typeof(Base.fill), UInt8, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.view), Array{UInt8, 2}, Base.BitArray{2}})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Array{Int64, 1}}, false}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{UInt8}}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.Broadcast.DefaultArrayStyle{1}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Array{Int64, 1}}, false}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{UInt8}}})
precompile(Tuple{typeof(Stuffing.qtree), Array{UInt8, 2}, Int64})
precompile(Tuple{typeof(Base.isassigned), Base.SubArray{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1, Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{typeof(Stuffing.QTrees.setcenter!), Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.SubArray{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1, Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}, Tuple{Array{Int64, 1}}, false}, Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, Int64})
precompile(Tuple{typeof(Base.argmax), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:rev,), Tuple{Bool}}, typeof(Base.Sort.partialsortperm), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Int64})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.Sort._sort!), Array{Int64, 1}, Base.Sort.MissingOptimization{Base.Sort.BoolOptimization{Base.Sort.Small{10, Base.Sort.InsertionSortAlg, Base.Sort.IEEEFloatOptimization{Base.Sort.ScratchQuickSort{Int64, Int64, Base.Sort.InsertionSortAlg}}}}}, Base.Order.Perm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}}, NamedTuple{(), Tuple{}}})
precompile(Tuple{typeof(Base.getindex), Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, Int64})
precompile(Tuple{typeof(Base.getindex), Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, Int64, Int64})
precompile(Tuple{typeof(Base.length), Base.SubArray{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1, Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt8, 2}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Int64, Int64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:roomfinder, :callback), Tuple{typeof(Stuffing.QTrees.findroom_uniform), WordCloud.var"#30#34"}}, typeof(Stuffing.QTrees.place!), Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, Base.SubArray{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1, Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Stuffing.QTrees.findroom_uniform), Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, Array{Tuple{Int64, Int64, Int64}, 1}})
precompile(Tuple{typeof(Stuffing.QTrees.getcenter), Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Stuffing.QTrees.setcenter!), Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.SubArray{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1, Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{typeof(Base.iterate), Base.SubArray{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1, Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.vect), Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, Vararg{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}}})
precompile(Tuple{typeof(Base.isvarargtype), Any})
precompile(Tuple{Base.var"#13#14"{DataType}, Int64})
precompile(Tuple{typeof(Base.fieldtypes), Type})
precompile(Tuple{typeof(Base.ntupleany), Base.var"#13#14"{DataType}, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:reposition, :optimiser), Tuple{Bool, Stuffing.Trainer.SGD}}, typeof(Stuffing.Trainer.train!), Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}}, Type{Symbol}, Type{Array{T, 1} where T}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Array{T, 1} where T}, Base.Dict{Symbol, Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{T, 1} where T}, Array{Array{Tuple{Int64, Int64, Int64}, 1}, 1}, Symbol})
precompile(Tuple{typeof(Core.Compiler.apply_type_tfunc), Core.Compiler.InferenceLattice{Core.Compiler.PartialsLattice{Core.Compiler.ConstsLattice}}, Any, Any, Vararg{Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Array{T, 1} where T}, Tuple{Pair{Symbol, Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}}, Pair{Symbol, Array{Array{Tuple{Int64, Int64, Int64}, 1}, 1}}, Pair{Symbol, Stuffing.Trainer.LRU{Int64, Stuffing.LinkedList.IntMap{Array{Stuffing.LinkedList.ListNode{Int64}, 1}}}}, Pair{Symbol, Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}}, Pair{Symbol, Array{Tuple{Int64, Int64}, 1}}, Pair{Symbol, Base.Set{Int64}}, Pair{Symbol, Stuffing.QTrees.HashSpacialQTree}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, Array{T, 1} where T}, Type{Symbol}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Array{T, 1} where T}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, Any}, Tuple{Pair{Symbol, Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}}, Pair{Symbol, Array{Array{Tuple{Int64, Int64, Int64}, 1}, 1}}, Pair{Symbol, Stuffing.Trainer.LRU{Int64, Stuffing.LinkedList.IntMap{Array{Stuffing.LinkedList.ListNode{Int64}, 1}}}}, Pair{Symbol, Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}}, Pair{Symbol, Array{Tuple{Int64, Int64}, 1}}, Pair{Symbol, Base.Set{Int64}}, Pair{Symbol, Stuffing.QTrees.HashSpacialQTree}}, Int64})
precompile(Tuple{Stuffing.Trainer.var"##train!#78", typeof(Stuffing.Trainer.trainepoch_EM2!), Int64, Stuffing.Trainer.SGD, Stuffing.Trainer.var"#87#99", Stuffing.Trainer.var"#88#100", Stuffing.Trainer.var"#89#101", Bool, Base.Dict{Symbol, Any}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Stuffing.Trainer.train!), Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}, Int64})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:updated, :queue, :colist, :itemlist, :memory, :spqtree, :pairlist), Tuple{Base.Set{Int64}, Array{Array{Tuple{Int64, Int64, Int64}, 1}, 1}, Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}, Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}, Stuffing.Trainer.LRU{Int64, Stuffing.LinkedList.IntMap{Array{Stuffing.LinkedList.ListNode{Int64}, 1}}}, Stuffing.QTrees.HashSpacialQTree, Array{Tuple{Int64, Int64}, 1}}}, NamedTuple{(:optimiser, :unique), Tuple{Stuffing.Trainer.SGD, Bool}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:queue, :itemlist, :spqtree, :pairlist, :unique), Tuple{Array{Array{Tuple{Int64, Int64, Int64}, 1}, 1}, Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}, Stuffing.QTrees.HashSpacialQTree, Array{Tuple{Int64, Int64}, 1}, Bool}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:queue,), Tuple{Array{Array{Tuple{Int64, Int64, Int64}, 1}, 1}}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:queue, :pairlist), Tuple{Array{Array{Tuple{Int64, Int64, Int64}, 1}, 1}, Array{Tuple{Int64, Int64}, 1}}}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:updated, :queue, :colist, :itemlist, :memory, :spqtree, :pairlist, :optimiser, :unique), Tuple{Base.Set{Int64}, Array{Array{Tuple{Int64, Int64, Int64}, 1}, 1}, Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}, Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}, Stuffing.Trainer.LRU{Int64, Stuffing.LinkedList.IntMap{Array{Stuffing.LinkedList.ListNode{Int64}, 1}}}, Stuffing.QTrees.HashSpacialQTree, Array{Tuple{Int64, Int64}, 1}, Stuffing.Trainer.SGD, Bool}}, typeof(Stuffing.Trainer.trainepoch_EM2!), Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}})
precompile(Tuple{Base.Threads.var"#1#2"{Stuffing.QTrees.var"#94#threadsfor_fun#33"{Stuffing.QTrees.var"#94#threadsfor_fun#32#34"{Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}, Array{Array{Tuple{Int64, Int64, Int64}, 1}, 1}, Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}, Base.Threads.SpinLock, Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}}}, Int64}})
precompile(Tuple{typeof(Stuffing.Trainer.update!), Stuffing.Trainer.MonotoneIndicator{Int64}, Int64})
precompile(Tuple{typeof(Base.length), Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}})
precompile(Tuple{typeof(Base.:(>)), Float64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:from, :force), Tuple{Stuffing.Trainer.var"#79#91", Bool}}, typeof(Stuffing.Trainer.reposition!), Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}, Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}})
precompile(Tuple{Base.Threads.var"#1#2"{Stuffing.QTrees.var"#75#threadsfor_fun#29"{Stuffing.QTrees.var"#75#threadsfor_fun#28#30"{Array{Pair{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64}}, 1}, Array{Array{Tuple{Int64, Int64, Int64}, 1}, 1}, Tuple{Int64, Int64, Int64}, Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}, Base.Threads.SpinLock, Array{Tuple{Int64, Int64}, 1}}}, Int64}})
precompile(Tuple{typeof(WordCloud.paint), WordCloud.WC})
precompile(Tuple{typeof(WordCloud.Render.parsecolor), NTuple{4, Int64}})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.ARGB32}, ColorTypes.ARGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.fill), ColorTypes.ARGB32, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Int64, Int64})
precompile(Tuple{typeof(WordCloud.Render.overlay!), Array{ColorTypes.ARGB32, 2}, Base.ReinterpretArray{ColorTypes.ARGB32, 2, UInt32, Array{UInt32, 2}, false}})
precompile(Tuple{WordCloud.var"##getpositions#18", Function, typeof(WordCloud.getpositions), WordCloud.WC, Function})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:mode,), Tuple{typeof(Stuffing.QTrees.getshift)}}, typeof(Stuffing.getpositions), Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, Base.SubArray{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1, Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}, Tuple{Array{Int64, 1}}, false}, Base.OneTo{Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Style, Axes, F, Args} where Args<:Tuple where F where Axes where Style<:Union{Nothing, Base.Broadcast.BroadcastStyle}}, Base.Broadcast.DefaultArrayStyle{1}, typeof(Stuffing.QTrees.getshift), Tuple{Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Stuffing.QTrees.getshift), Tuple{Array{Stuffing.QTrees.ShiftedQTree{Array{Stuffing.QTrees.PaddedMat{Array{UInt8, 2}}, 1}}, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcast), Stuffing.var"#21#22"{Int64, Int64}, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(WordCloud.Render.overlay!), Array{ColorTypes.ARGB32, 2}, Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Array{Int64, 1}}, false}, Array{Tuple{Int64, Int64}, 1}})
precompile(Tuple{typeof(WordCloud.Render.overlay!), Array{ColorTypes.ARGB32, 2}, Array{ColorTypes.ARGB32, 2}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:stderr, :stdin, :stdout), Tuple{Base.TTY, Nothing, Base.TTY}}, typeof(Base.redirect_stdio)})
precompile(Tuple{typeof(Base.convert), Type{Ptr{Sixel.LibSixel.C.sixel_allocator}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Ptr{Sixel.LibSixel.C.sixel_dither}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Ptr{Sixel.LibSixel.C.sixel_output}}, Int64})
precompile(Tuple{typeof(Base.tail), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:keep,), Tuple{Bool}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:keep,), Tuple{Bool}}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Base.Multimedia.MIME{Symbol("text/plain")}, Array{ColorTypes.ARGB32, 2}})
precompile(Tuple{typeof(XTermColors.ascii_show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{ColorTypes.ARGB32, 2}, XTermColors.TermColor24bit, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{ImageBase.var"##s8#12", Vararg{Any, 8}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ImageBase.var"#13#14", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, ImageBase.var"#13#14"}})
precompile(Tuple{typeof(Base.convert), Type{Float32}, Float64})
precompile(Tuple{Type{ColorTypes.ARGB{Float32}}, Vararg{Int64, 4}})
precompile(Tuple{typeof(ImageBase._restrict!), Array{ColorTypes.ARGB{Float32}, 2}, Base.OneTo{Int64}, Array{ColorTypes.ARGB32, 2}, Tuple{}, Base.OneTo{Int64}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{ImageBase.var"##s8#7", Vararg{Any, 9}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ImageBase.var"#8#10", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, ImageBase.var"#8#10"}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, ImageBase.var"#9#11", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, ImageBase.var"#9#11"}})
precompile(Tuple{typeof(Base.:(+)), Int64, Bool})
precompile(Tuple{typeof(ImageBase._restrict!), Array{ColorTypes.ARGB{Float32}, 2}, Base.OneTo{Int64}, Array{ColorTypes.ARGB{Float32}, 2}, Tuple{Base.OneTo{Int64}}, Base.OneTo{Int64}, Tuple{}})
precompile(Tuple{typeof(ImageBase._restrict!), Array{ColorTypes.ARGB{Float32}, 2}, Base.OneTo{Int64}, Array{ColorTypes.ARGB{Float32}, 2}, Tuple{}, Base.OneTo{Int64}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:foreground, :background), Tuple{Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}}}, Type{Crayons.Crayon}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UInt8})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:foreground, :background), Tuple{Tuple{Int64, Int64, Int64}, Nothing}}, Type{Crayons.Crayon}})
precompile(Tuple{Type{Pair{A, B} where B where A}, Base.SubString{String}, Int64})
precompile(Tuple{typeof(Base._str_sizehint), Base.SubString{String}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{names, T} where T<:Tuple where names, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:dir,), Tuple{String}}})
precompile(Tuple{typeof(Base.haskey), Base.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:dir,), Tuple{String}}}, Symbol})
precompile(Tuple{typeof(Logging.showvalue), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(FileWatching.uvfinalize), FileWatching.FileMonitor})
